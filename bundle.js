(()=>{"use strict";var __webpack_modules__={680:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n;// CONCATENATED MODULE: ./src/const.ts\nconst constants = {\n    scale: 8,\n    paces: {\n        \"4\": 4,\n        \"2\": 2,\n        \"1\": 1,\n        \"0.5\": 0.5,\n        \"0.25\": 0.25\n    },\n    plant_template_ids: [\n        \"basic_plant\",\n        \"yellow_dip\",\n        \"blue_haze\",\n        \"red_quartz\"\n    ]\n};\n/* harmony default export */ const src_const = (constants);\n\n;// CONCATENATED MODULE: ./src/Vector.ts\nclass Vector {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    add(v) {\n        return new Vector(this.x + v.x, this.y + v.y);\n    }\n    divide(n) {\n        return new Vector(this.x / n, this.y / n);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/util.ts\n\n\nfunction rangeOverlap(x1, x2, y1, y2) {\n    return Math.max(0, Math.min(x2, y2) - Math.max(x1, y1) + 1);\n}\nfunction secondsToTime(secs) {\n    var hours = Math.floor(secs / (60 * 60));\n    var divisor_for_minutes = secs % (60 * 60);\n    var minutes = Math.floor(divisor_for_minutes / 60);\n    var divisor_for_seconds = divisor_for_minutes % 60;\n    var seconds = Math.ceil(divisor_for_seconds);\n    var obj = {\n        \"h\": hours,\n        \"m\": minutes,\n        \"s\": seconds\n    };\n    return obj;\n}\nfunction humanReadableTime(time) {\n    const hours_str = time.h > 0 ? `${time.h} ${time.h == 1 ? 'hour' : 'hours'}` : null;\n    const mins_str = time.m > 0 ? `${time.m} ${time.m == 1 ? 'minute' : 'minutes'}` : null;\n    const seconds_str = time.s > 0 ? `${time.s} ${time.s == 1 ? 'second' : 'seconds'}` : null;\n    const arr = [hours_str, mins_str, seconds_str].filter(str => str != null);\n    return arr.join(', ');\n}\nfunction humanReadableTimeFromSeconds(seconds) {\n    const time = secondsToTime(seconds);\n    return humanReadableTime(time);\n}\nfunction getViewportCenter() {\n    return new Vector(window.innerWidth / 2 / src_const.scale, window.innerHeight / 2 / src_const.scale);\n}\nfunction getTemplateMaxStageIndex(template) {\n    return template.stages.length - 1;\n}\nfunction getPlantImageID(plant_id, stage) {\n    return 'images/' + plant_id + '/' + stage;\n}\nfunction getPlantImageBloblID(plant_id, stage) {\n    return 'image_blobs/' + plant_id + '/' + stage;\n}\nfunction getTemplateResourceID(template_id) {\n    return 'templates/' + template_id;\n}\nfunction getPlantTemplateFullyGrownImageURL(plant_template) {\n    const max_stage = plant_template.stages.length - 1;\n    return plant_template.stages[max_stage].image_url;\n}\nfunction getTemplateUnlock(template_id, all_templates) {\n    const unlock_id = all_templates[template_id].unlocks;\n    return all_templates[unlock_id];\n}\n/**\n * Get the maximum units of growth a plant can grow to\n */\nfunction getTemplateMaxGrowth(plant_template) {\n    const max_stage_index = getTemplateMaxStageIndex(plant_template);\n    return plant_template.stages[max_stage_index].at_growth * plant_template.multiplier;\n}\n/**\n * Get the plants max water index\n * @param plant_template\n */\nfunction getTemplateMaxWaterIndex(plant_template) {\n    return plant_template.water_level.stages.length - 1;\n}\n/**\n * Get plant's max water level\n */\nfunction getTemplateMaxWaterStage(plant_template) {\n    const max_index = getTemplateMaxWaterIndex(plant_template);\n    return plant_template.water_level.stages[max_index];\n}\n/**\n * Get the growth rate of a plant at max water level\n */\nfunction getTemplateMaxGrowthRate(plant_template) {\n    const max_water_level = getTemplateMaxWaterStage(plant_template);\n    return max_water_level.growth_rate * plant_template.multiplier;\n}\n/**\n * Time it takes to grow a plant if its is at max water stage\n */\nfunction templateTimeToGrow(plant_template, seconds_per_tick) {\n    const max_growth = getTemplateMaxGrowth(plant_template);\n    const max_growth_rate = getTemplateMaxGrowthRate(plant_template);\n    return max_growth * plant_template.multiplier / max_growth_rate * seconds_per_tick;\n}\n/**\n * How often a plant's water level runs out, in seconds\n *\n */\nfunction templateWateringFrequency(plant_template, seconds_per_tick) {\n    const water_decrease_rate = plant_template.water_level.decrease_rate * plant_template.multiplier;\n    return 100 / water_decrease_rate * seconds_per_tick;\n}\n\n;// CONCATENATED MODULE: ./src/ImageLoader.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass ImageLoader {\n    constructor(cache) {\n        this.cache = cache;\n    }\n    loadTemplateImageIfNull(plant_id, stage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res_id = getPlantImageID(plant_id, stage);\n            if (!this.cache.has(res_id)) {\n                try {\n                    const img_url = './images/' + plant_id + '/' + plant_id + '_' + stage + '.png';\n                    const img_res = yield fetch(img_url);\n                    const img_data = yield img_res.blob();\n                    const image = yield createImageBitmap(img_data);\n                    const blob_id = getPlantImageBloblID(plant_id, stage);\n                    this.cache.set(res_id, image);\n                    this.cache.set(blob_id, img_data);\n                }\n                catch (e) {\n                    throw new Error('Could not load image: ' + e.message);\n                }\n            }\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./src/MyCache.ts\nclass MyCache {\n    constructor() {\n        this.items = {};\n    }\n    set(id, value) {\n        if (id in this.items) {\n            throw new Error('Cache: Could not store item by id ' + id + ': id already taken');\n        }\n        this.items[id] = value;\n    }\n    get(id) {\n        if (!(id in this.items)) {\n            throw new Error('Cache: Could not find item by id ' + id);\n        }\n        return this.items[id];\n    }\n    has(id) {\n        return (id in this.items);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/MyStorage.ts\nclass MyStorage {\n    constructor() {\n        this.prefix = 'pixel-plant:';\n    }\n    get(key) {\n        return JSON.parse(localStorage.getItem(this.prefix + key));\n    }\n    set(key, value) {\n        localStorage.setItem(this.prefix + key, JSON.stringify(value));\n    }\n    has(key) {\n        return !!localStorage.getItem(this.prefix + key);\n    }\n    remove(key) {\n        localStorage.removeItem(key);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/GameObject.ts\n\nclass GameObject {\n    constructor(position = new Vector(0, 0)) {\n        this.position = position;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Rect.ts\n\nclass Rect {\n    constructor(position = new Vector(0, 0), size = new Vector(0, 0)) {\n        this.size = size;\n        this.position = position;\n    }\n    calculateBounds() {\n        this.left = this.position.x - this.size.x / 2;\n        this.right = this.position.x + this.size.x / 2;\n        this.top = this.position.y - this.size.y / 2;\n        this.bottom = this.position.y - this.size.y / 2;\n    }\n    setPosition(v) {\n        this.position = v;\n        this.calculateBounds();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/ProgressBar.ts\n\nclass ProgressBar extends Rect {\n    constructor(rect, options) {\n        super(rect.position, rect.size);\n        Object.assign(this, options);\n    }\n}\n//export default ProgressBar\n\n;// CONCATENATED MODULE: ./src/Sprite.ts\n\n\nclass Sprite extends GameObject {\n    constructor(image, position) {\n        super(position);\n        this.image = image;\n        this.width = image.width;\n        this.height = image.height;\n    }\n    getCenter(scale = 1) {\n        return this.position.divide(scale).add(new Vector(-this.width / 2, -this.height / 2));\n    }\n}\n\n;// CONCATENATED MODULE: ./src/WaterLevel.ts\nclass WaterLevel {\n    constructor(decrease_rate = 0.5, stages = []) {\n        this.stages = stages;\n        this.current = 100;\n        this.decrease_rate = decrease_rate;\n        this.validateStages();\n        this.calcCurrentStage();\n    }\n    validateStages() {\n        for (let a = 0; a < this.stages.length; a++) {\n            const stage_a = this.stages[a - 1];\n            const stage_b = this.stages[a];\n            const stage_c = this.stages[a + 1];\n            let valid;\n            if (this.stages.length == 1) {\n                valid = stage_b.from == 0 && stage_b.to == 100;\n            }\n            else if (a == 0) {\n                valid = stage_b.from == 0 && stage_b.to == stage_c.from;\n            }\n            else if (a != this.stages.length - 1) {\n                valid = stage_a.to == stage_b.from && stage_b.to == stage_c.from;\n            }\n            else {\n                valid = stage_b.from == stage_a.to && stage_b.to == 100;\n            }\n            if (!valid) {\n                throw new Error('Invalid water level');\n            }\n        }\n    }\n    calcCurrentStage() {\n        for (let i = 0; i < this.stages.length; i++) {\n            const stage = this.stages[i];\n            if (this.current <= stage.to && this.current >= stage.from) {\n                this.current_stage = i;\n                return;\n            }\n        }\n        throw new Error('Error calculating water current stage');\n    }\n    getCurrentStage() {\n        return this.stages[this.current_stage];\n    }\n    decreaseByTicks(ticks) {\n        this.current = Math.max(0, this.current - this.decrease_rate * ticks);\n        this.calcCurrentStage();\n    }\n    decrease() {\n        this.decreaseByTicks(1);\n    }\n    set(current) {\n        this.current = current;\n        this.calcCurrentStage();\n    }\n    top() {\n        this.set(100);\n    }\n    static fromTemplate(template) {\n        const stages = [];\n        const multiplier = template.multiplier;\n        template.water_level.stages.forEach((stage) => {\n            stages.push(Object.assign(Object.assign({}, stage), { growth_rate: stage.growth_rate * multiplier }));\n        });\n        return new WaterLevel(template.water_level.decrease_rate * multiplier, stages);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Plant.ts\nvar Plant_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nclass Plant extends GameObject {\n    constructor(id, options) {\n        super();\n        this.water_level = new WaterLevel(0.5, [\n            {\n                from: 0,\n                to: 100,\n                growth_rate: 4\n            },\n        ]);\n        this.current_stage = 0;\n        this.growth = 0;\n        this.position = new Vector(0, 0);\n        this.size = new Vector(16, 32);\n        this.id = id;\n        Object.assign(this, options);\n        this.initWaterLevelBar();\n        this.setPosition(getViewportCenter());\n    }\n    initWaterLevelBar() {\n        const dividers = this.water_level.stages.map(stage => stage.to);\n        dividers.pop();\n        this.water_level_bar = new ProgressBar(new Rect(new Vector(0, 0), new Vector(20, 2)), {\n            bg_color: '#0008FF42',\n            color: '#0008FFAD',\n            divider_color: 'darkblue',\n            direction: 'right',\n            current: 0,\n            dividers\n        });\n        this.water_level_bar.current = this.water_level.current;\n    }\n    maxGrowth() {\n        return this.stages[this.stages.length - 1].at_growth;\n    }\n    isFullyGrown() {\n        return this.growth > this.maxGrowth();\n    }\n    toJSON() {\n        return {\n            id: this.id,\n            plant_id: this.plant_id,\n            name: this.name,\n            water_level_current: this.water_level.current,\n            growth: this.growth,\n            fully_grown_called: this.fully_grown_called\n        };\n    }\n    onFullyGrown(callback) {\n        this.fully_grown_cb = callback;\n    }\n    static fromJSON(json, cache) {\n        return Plant_awaiter(this, void 0, void 0, function* () {\n            const plant = yield Plant.fromTemplate(json.id, json.plant_id, cache);\n            plant.name = json.name;\n            plant.water_level.set(json.water_level_current);\n            plant.setGrowth(json.growth);\n            plant.fully_grown_called = json.fully_grown_called;\n            return plant;\n        });\n    }\n    static stagesFromTemplate(template, cache) {\n        return Plant_awaiter(this, void 0, void 0, function* () {\n            const plant_stages = [];\n            const multiplier = template.multiplier;\n            for (let i = 0; i < template.stages.length; i++) {\n                const res_id = getPlantImageID(template.plant_id, i);\n                const image = cache.get(res_id);\n                //Plant data\n                const sprite = new Sprite(image);\n                const at_growth = template.stages[i].at_growth * multiplier;\n                plant_stages.push({\n                    sprite,\n                    at_growth\n                });\n            }\n            return plant_stages;\n        });\n    }\n    static fromTemplate(id, template_id, cache) {\n        return Plant_awaiter(this, void 0, void 0, function* () {\n            const res_id = getTemplateResourceID(template_id);\n            if (!cache.has(res_id)) {\n                const template_res = yield fetch('./plant_templates/' + template_id + '.json');\n                const template = yield template_res.json();\n                cache.set(res_id, template);\n            }\n            const template = cache.get(res_id);\n            const stages = yield Plant.stagesFromTemplate(template, cache);\n            const water_level = WaterLevel.fromTemplate(template);\n            const options = {\n                plant_id: template.plant_id,\n                water_level,\n                name: 'My Plant',\n                stages,\n                unlocks: template.unlocks\n            };\n            return new Plant(id, options);\n        });\n    }\n    calculateCurrentStage() {\n        const stage_indexes = this.stages.map((stage, index) => index);\n        var curr_stage_index = stage_indexes.reduce((a, i) => {\n            const prev_stage = this.stages[a];\n            const curr_stage = this.stages[i];\n            let is_growth_in_curr_stage = curr_stage.at_growth > prev_stage.at_growth && this.growth > curr_stage.at_growth;\n            if (is_growth_in_curr_stage) {\n                return i;\n            }\n            else {\n                return a;\n            }\n        });\n        this.current_stage = curr_stage_index;\n    }\n    growBy(added_growth) {\n        this.growth += added_growth;\n        this.calculateCurrentStage();\n        if (this.isFullyGrown() && this.fully_grown_cb && !this.fully_grown_called) {\n            this.fully_grown_cb(this);\n            this.fully_grown_called = true;\n        }\n    }\n    /**\n     * Grows plant by 1 tick\n     */\n    grow() {\n        let growth_rate = 0;\n        if (this.water_level.current > 0) {\n            growth_rate = this.water_level.getCurrentStage().growth_rate;\n        }\n        this.growBy(growth_rate);\n    }\n    setGrowth(growth) {\n        this.growth = growth;\n        this.calculateCurrentStage();\n    }\n    getCurrentStage() {\n        return this.stages[this.current_stage];\n    }\n    fastForward(ticks) {\n        const water_end = this.water_level.current;\n        this.water_level.decreaseByTicks(ticks);\n        const water_start = this.water_level.current;\n        let added_growth = 0;\n        for (let i = 0; i < this.water_level.stages.length; i++) {\n            const water_stage = this.water_level.stages[i];\n            const growt_rate = water_stage.growth_rate;\n            const overlap = rangeOverlap(water_start, water_end, water_stage.from, water_stage.to);\n            added_growth += (overlap / this.water_level.decrease_rate) * growt_rate;\n        }\n        this.growBy(added_growth);\n    }\n    tick() {\n        this.grow();\n        //this.water_level.decrease();\n        this.decreaseWaterLevel();\n    }\n    decreaseWaterLevelByTicks(ticks) {\n        this.water_level.decreaseByTicks(ticks);\n        this.updateWaterLevelBar();\n    }\n    decreaseWaterLevel() {\n        this.decreaseWaterLevelByTicks(1);\n    }\n    updateWaterLevelBar() {\n        this.water_level_bar.current = this.water_level.current;\n    }\n    setPosition(p) {\n        this.position = p;\n        for (let i = 0; i < this.stages.length; i++) {\n            this.stages[i].sprite.position = this.position;\n        }\n        this.water_level_bar.setPosition(new Vector(this.position.x, this.getRect().bottom + 2));\n    }\n    getRect() {\n        return {\n            top: this.position.y - this.size.y / 2,\n            bottom: this.position.y + this.size.y / 2,\n            left: this.position.x - this.size.x / 2,\n            right: this.position.x + this.size.x / 2\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Renderer.ts\n\n\nclass Renderer {\n    constructor(canvas_id, ui_id, menu_id) {\n        this.scale = src_const.scale;\n        this.menus = {};\n        this.menu = null;\n        this.canvas = document.getElementById(canvas_id);\n        this.ui = document.getElementById(ui_id);\n        this.menu_element = document.getElementById(menu_id);\n        if (!this.canvas) {\n            throw new Error('Could not find canvas element by id ' + canvas_id);\n        }\n        window.addEventListener('resize', (e) => {\n            this.calculateCanvasSize();\n        });\n        this.ctx = this.canvas.getContext('2d');\n        this.calculateCanvasSize();\n    }\n    calculateCanvasSize() {\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        this.ctx.scale(this.scale, this.scale);\n        this.ctx.imageSmoothingEnabled = false;\n    }\n    clear() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    scaledPosition(pos) {\n        return pos.divide(this.scale);\n    }\n    drawSprite(sprite) {\n        const pos = sprite.position.add(new Vector(-sprite.width / 2, -sprite.height / 2)); //sprite.getCenter(this.scale)\n        this.ctx.drawImage(sprite.image, pos.x, pos.y);\n    }\n    drawRect(rect, color) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(rect.left, rect.top, rect.size.x, rect.size.y);\n    }\n    drawLine(from, to, color) {\n        this.ctx.strokeStyle = color;\n        this.ctx.beginPath();\n        this.ctx.moveTo(from.x, from.y);\n        this.ctx.lineTo(to.x, to.y);\n        this.ctx.stroke();\n    }\n    currentMenu() {\n        return document.getElementById(this.menu);\n    }\n    drawProgressBar(progress_bar) {\n        const { position, size } = progress_bar;\n        const { x, y } = position;\n        const { x: width, y: height } = size;\n        const left = x - width / 2;\n        const top = y - height / 2;\n        this.drawRect(progress_bar, progress_bar.bg_color);\n        this.ctx.fillStyle = progress_bar.color;\n        const new_rect = structuredClone(progress_bar);\n        if (progress_bar.direction == 'right') {\n            new_rect.size.x = progress_bar.current / 100 * progress_bar.size.x;\n            this.drawRect(new_rect, progress_bar.color);\n            const bar_length = new_rect.right - new_rect.left;\n            const y = new_rect.position.y - 1;\n            const end_y = new_rect.bottom + 2;\n            for (const divider of progress_bar.dividers) {\n                const x = new_rect.position.x - (bar_length / 2) + bar_length / 100 * divider;\n                const pos1 = new Vector(x, y);\n                const pos2 = new Vector(x, end_y);\n                this.drawLine(pos1, pos2, progress_bar.divider_color);\n            }\n        }\n        else {\n            throw new Error('Progress bar rendering only implemented for right direction');\n        }\n    }\n    drawPlant(plant) {\n        this.drawSprite(plant.getCurrentStage().sprite);\n        this.drawProgressBar(plant.water_level_bar);\n        //this.drawSprite\n    }\n    addMenu(menu, menu_id) {\n        if (menu_id) {\n            menu.id = menu_id + '-menu';\n        }\n        menu.classList.add('menu');\n        document.getElementById('menus').appendChild(menu);\n        this.menus[menu_id] = menu;\n    }\n    showMenu(menu_id) {\n        this.ui.style.display = 'none';\n        this.menu_element.style.display = 'flex';\n        this.hideMenu();\n        const menu = document.getElementById(menu_id + '-menu');\n        if (!menu) {\n            throw new Error('Could not find menu with ID ' + menu_id);\n        }\n        menu.style.display = 'flex';\n        this.menu_element.style.display = 'flex';\n        this.hideUI();\n        //this.menu_element.replaceWith(this.menu)\n    }\n    hideUI() {\n        this.ui.style.display = 'none';\n        this.canvas.style.display = 'none';\n    }\n    showUI() {\n        this.ui.style.display = 'block';\n        this.canvas.style.display = 'flex';\n    }\n    hideMenu() {\n        Object.keys(this.menus).forEach(menu_id => {\n            document.getElementById(menu_id + '-menu').style.display = 'none';\n        });\n        this.menu_element.style.display = 'none';\n        this.showUI();\n    }\n}\n\n;// CONCATENATED MODULE: ./src/MyEvent.ts\nclass MyEvent {\n    constructor() {\n        this.max_id = 0;\n        this.callbacks = {};\n    }\n    on(cb) {\n        this.callbacks[this.max_id++] = cb;\n        return this.max_id;\n    }\n    off(id) {\n        delete this.callbacks[id];\n    }\n    emit(...args) {\n        for (const key in this.callbacks) {\n            this.callbacks[key](...args);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/main_events.ts\n\nconst main_events = {\n    on_request_plant_new_plant: new MyEvent(),\n    on_request_water_plant: new MyEvent(),\n    on_request_fast_forward: new MyEvent(),\n    on_request_show_menu: new MyEvent(),\n    on_request_set_view: new MyEvent(),\n    on_request_data_reset: new MyEvent(),\n    on_request_data_save: new MyEvent(),\n    after_data_reset: new MyEvent(),\n    on_fast_forward: new MyEvent()\n};\n/* harmony default export */ const src_main_events = (main_events);\n\n;// CONCATENATED MODULE: ./src/globals.ts\nconst globals = {\n    seconds_per_tick: 1,\n    recently_unlocked: 'basic_plant'\n};\n/* harmony default export */ const src_globals = (globals);\n\n;// CONCATENATED MODULE: ./src/UIManager.ts\nvar UIManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\nclass UIManager {\n    constructor(renderer) {\n        //game: Game;\n        this.button = document.createElement('button');\n        this.menu = document.createElement('div');\n        this.plant_buttons = [];\n        this.plant_image = document.createElement('img');\n        this.plant_name = document.createElement('h2');\n        this.plant_description = document.createElement('p');\n        this.plant_stages = document.createElement('li');\n        this.plant_time_to_grow = document.createElement('li');\n        this.plant_water_frequency = document.createElement('li');\n        this.tabbable_elements = [];\n        this.current_tab_index = 0;\n        this.collection_images = {};\n        this.renderer = renderer;\n        this.button.classList.add('button');\n        this.menu.classList.add('menu');\n        const NAV_UP = 'ArrowUp';\n        const NAV_DOWN = 'ArrowDown';\n        document.addEventListener('keydown', (e) => {\n            // Keyboard navigation\n            if (e.code == NAV_UP) {\n                e.preventDefault();\n                this.navigateUp();\n            }\n            else if (e.code == NAV_DOWN) {\n                e.preventDefault();\n                this.navigateDown();\n            }\n        });\n    }\n    /**\n     * Keyboard navigation\n     */\n    navigateUp() {\n        let reference_index = this.current_tab_index;\n        const indices_above = this.getIndexes('above', reference_index);\n        if (indices_above.length == 0) {\n            reference_index = this.getMaxIndex() + 1;\n        }\n        const closest_index = this.getClosetIndex(reference_index, this.getIndexes('above', reference_index));\n        this.navigateToIndex(closest_index);\n    }\n    navigateDown() {\n        let reference_index = this.current_tab_index;\n        const indices_below = this.getIndexes('below', reference_index);\n        if (indices_below.length == 0) {\n            reference_index = 0;\n        }\n        const closest_index = this.getClosetIndex(reference_index, this.getIndexes('below', reference_index));\n        this.navigateToIndex(closest_index);\n    }\n    getMaxIndex() {\n        return Math.max(...this.getIndexes('all'));\n    }\n    /**\n     * Returns array of indices for visible tabbable elements\n     * @param direction\n     * @param reference_index\n     * @returns\n     */\n    getIndexes(direction = 'all', reference_index = null) {\n        let indices_all = null;\n        const visible_elements = this.getVisibleElements();\n        if (direction == 'all') {\n            indices_all = visible_elements.map((element) => element.tabIndex);\n        }\n        else if (typeof reference_index == 'number') {\n            indices_all = visible_elements.filter(element => {\n                return direction == 'below' ? element.tabIndex > reference_index : element.tabIndex < reference_index;\n            }).map((element) => element.tabIndex);\n        }\n        else {\n            throw new Error(`If direction isn't 'all', reference_index must be specified`);\n        }\n        return indices_all;\n    }\n    isElementVisible(element) {\n        return element.offsetParent != null;\n    }\n    getVisibleElements() {\n        return this.tabbable_elements.filter((elem) => this.isElementVisible(elem));\n    }\n    getElementByIndex(index) {\n        return this.getVisibleElements().find(elem => elem.tabIndex == index);\n    }\n    getClosetIndex(reference_index, from) {\n        if (from.length == 1) {\n            return from[0];\n        }\n        return from.reduce((a, b) => {\n            //const a = parseInt(a_str);\n            //const b = parseInt(b_str);\n            return Math.abs(b - reference_index) < Math.abs(a - reference_index) ? b : a;\n        });\n    }\n    navigateToIndex(index) {\n        const target_elem = this.getElementByIndex(index);\n        this.current_tab_index = index;\n        target_elem.focus();\n    }\n    initGameUI() {\n        // Game UI\n        // water_button.innerHTML = 'Water Plant'\n        // water_button.style.position = 'absolute'\n        // water_button.style.top = '140px'\n        // water_button.style.left = '50%';\n        // water_button.style.transform = 'translateX(-50%)'\n        // water_button.tabIndex = 4;\n        //Back button\n        const back_button = this.createLinkButton('Back', 'main', 'button-tl', 1);\n        this.water_button = this.createButton('Water Plant', 'water-button', 2);\n        const water_button = this.water_button;\n        //Progress message\n        const progress_message_container = document.createElement('div');\n        this.progress_message_container = progress_message_container;\n        progress_message_container.classList.add('progress-message');\n        // progress_message_container.tabIndex = 0;\n        const progress_message_bottom = document.createElement('div');\n        progress_message_bottom.classList.add('progress-message-bottom');\n        this.progress_message = document.createElement('p');\n        const progress_message = this.progress_message;\n        progress_message.innerHTML = 'You were away for n hours n minutes and your plant has grown by x %';\n        const dismiss_button = this.createButton('Dismiss', 'menu-button', 3, () => {\n            progress_message_container.style.display = 'none';\n        });\n        this.progress_message_plant = this.createButton('Plant', 'menu-button', 4);\n        this.progress_message_plant.classList.add('small-button');\n        this.progress_message_plant.innerHTML = 'Plant';\n        progress_message_container.appendChild(progress_message);\n        progress_message_container.appendChild(progress_message_bottom);\n        progress_message_bottom.appendChild(dismiss_button);\n        progress_message_bottom.appendChild(this.progress_message_plant);\n        /**\n         * Have to use mousedown instead of click here because otherwise the progress\n         * message container loses focus before the click event is fired\n         */\n        this.progress_message_plant.addEventListener('mousedown', () => {\n            progress_message_container.style.display = 'none';\n            src_main_events.on_request_plant_new_plant.emit(src_globals.recently_unlocked);\n        });\n        // progress_message_container.addEventListener('focusout', () => {\n        //     progress_message_container.style.display = 'none'\n        // })\n        water_button.addEventListener('click', () => {\n            src_main_events.on_request_water_plant.emit();\n            //this.game.waterCurrentPlant()\n        });\n        this.renderer.ui.appendChild(water_button);\n        this.renderer.ui.appendChild(back_button);\n        this.renderer.ui.appendChild(progress_message_container);\n    }\n    initMainMenu(is_new_game) {\n        //Main menu\n        //Play button\n        this.play_button = this.createViewButton(is_new_game ? 'New Game' : 'My Plant', 'plant', 'menu-button', 1, () => {\n            src_main_events.on_request_fast_forward.emit();\n            //this.game.fastForwardBySeconds(this.game.getTimeAway())\n        });\n        //Collection button\n        const collection_button = this.createLinkButton('Collection', 'collection', 'menu-button', 2);\n        //Help button\n        const help_button = this.createLinkButton('Help', 'help', 'menu-button', 3);\n        //Options button\n        const options_button = this.createLinkButton('Options', 'options', 'menu-button', 4);\n        this.main_menu = this.createMenu();\n        this.main_menu.appendChild(this.play_button);\n        this.main_menu.appendChild(collection_button);\n        this.main_menu.appendChild(help_button);\n        this.main_menu.appendChild(options_button);\n        this.renderer.addMenu(this.main_menu, 'main');\n    }\n    initOptionsMenu() {\n        //Options menu\n        const options_menu = this.createMenu();\n        const pace_selector = document.createElement('div');\n        const pace_selector_label = document.createElement('p');\n        const pace_selector_dropdown = document.createElement('select');\n        // Make dropdown navigatable by arrow keys\n        this.addTabbableElement(pace_selector_dropdown, 1);\n        pace_selector.classList.add('pace-selector');\n        pace_selector_label.innerHTML = 'Pace: ';\n        for (const pace_key in src_const.paces) {\n            const option = document.createElement('option');\n            option.value = pace_key;\n            option.innerHTML = pace_key;\n            let should_be_selected = parseFloat(pace_key) == 1 / src_globals.seconds_per_tick;\n            if (should_be_selected) {\n                option.selected = true;\n            }\n            pace_selector_dropdown.appendChild(option);\n        }\n        src_main_events.after_data_reset.on(() => {\n            pace_selector_dropdown.value = \"1\";\n        });\n        pace_selector.appendChild(pace_selector_label);\n        pace_selector.appendChild(pace_selector_dropdown);\n        const options_back = this.createLinkButton('Back', 'main', 'menu-button', 2);\n        const reset_button = this.createButton('Reset Game', 'menu-button', 3);\n        options_menu.appendChild(pace_selector);\n        options_menu.appendChild(options_back);\n        options_menu.appendChild(reset_button);\n        //Options menu\n        pace_selector_dropdown.addEventListener('change', (e) => {\n            src_globals.seconds_per_tick = 1 / parseFloat(e.target.value);\n            src_main_events.on_request_data_save.emit();\n        });\n        reset_button.addEventListener('click', () => {\n            src_main_events.on_request_data_reset.emit();\n        });\n        this.renderer.addMenu(options_menu, 'options');\n    }\n    initCollectionMenu(plant_templates, unlocked_plants, grown_plants) {\n        // Collection menu\n        const collection_menu = this.createMenu('menu-non-centered');\n        const collection_back = this.createLinkButton('Back', 'main', 'menu-button', 1);\n        collection_menu.appendChild(collection_back);\n        let button_index = 1;\n        for (const template_id in plant_templates) {\n            button_index++;\n            const plant_button = this.createButton('', 'menu-button', button_index);\n            plant_button.classList.add('plant-button');\n            // const plant = await Plant.fromTemplate(template_id, template_id, this.cache)\n            const plant_template = plant_templates[template_id];\n            const img_element = document.createElement('img');\n            img_element.classList.add('collection-image');\n            this.collection_images[template_id] = img_element;\n            plant_button.appendChild(img_element);\n            const is_plant_unlocked = unlocked_plants.includes(plant_template.plant_id);\n            const is_plant_grown = grown_plants.includes(plant_template.plant_id);\n            this.updateCollectionImage(plant_template, is_plant_unlocked, is_plant_grown);\n            collection_menu.appendChild(plant_button);\n        }\n        src_main_events.after_data_reset.on(() => {\n            this.resetCollectionImages(plant_templates);\n        });\n        this.renderer.addMenu(collection_menu, 'collection');\n    }\n    initPlantEntryMenu() {\n        //Plant Entry\n        const plant_menu = this.createMenu();\n        const plant_back = this.createLinkButton('Back', 'collection', 'menu-button', 1);\n        this.plant_image.classList.add('plant-entry-image');\n        const plant_button = this.createButton('Plant', 'menu-button', 2);\n        const stats = document.createElement('ul');\n        stats.appendChild(this.plant_stages);\n        stats.appendChild(this.plant_time_to_grow);\n        stats.appendChild(this.plant_water_frequency);\n        const info = document.createElement('div');\n        info.classList.add('plant-entry-info');\n        info.appendChild(this.plant_description);\n        info.appendChild(stats);\n        plant_menu.appendChild(plant_back);\n        plant_menu.appendChild(this.plant_image);\n        plant_menu.appendChild(this.plant_name);\n        plant_menu.appendChild(info);\n        plant_menu.appendChild(plant_button);\n        plant_button.addEventListener('click', () => {\n            src_main_events.on_request_plant_new_plant.emit(this.current_plant_in_menu.plant_id);\n            //this.game.plantNewPlant(this.current_plant_in_menu.plant_id);\n        });\n        this.renderer.addMenu(plant_menu, 'plant');\n    }\n    initHelpMenu() {\n        const help_menu = this.createMenu('menu-non-centered');\n        const back_button = this.createLinkButton('Back', 'main', null, 1);\n        const text_element = document.createElement('p');\n        text_element.innerHTML = `Welcome to My Pixel Plant. This is a small relaxing game where the sole\n        purpose is to just water your plant and watch it grow.<br><br>\n        \n        Each plant has several stages of growth, each of varying lengths. <br><br>\n        \n        A plant has a water level - which indicates how much water the plant has. The water\n        levels are split into water level stages, and the less water a plant has, the slower it will grow. The water level\n        stages are divided by dark vertical lines that you can see on your water level bar. <br><br>\n        \n        Whenever you grow a plant, a new plant gets unlocked. Each newly unlocked plant takes longer and longer to grow. <br><br>\n        \n        The Collection is a place where you can view all of your unlocked plant types and some information about them, such as how long they take to grow, how many stages\n        they have, and how frequently they have to be watered. Currently there are 4 plant types in the game. <br><br>\n        \n        Good luck with your plants and I hope you'll have fun playing this little game!\n        `;\n        help_menu.appendChild(back_button);\n        help_menu.appendChild(text_element);\n        this.renderer.addMenu(help_menu, 'help');\n    }\n    initUi(plant_templates, unlocked_plants, grown_plants, is_new_game) {\n        return UIManager_awaiter(this, void 0, void 0, function* () {\n            this.initGameUI();\n            this.initMainMenu(is_new_game);\n            this.initOptionsMenu();\n            this.initPlantEntryMenu();\n            this.initCollectionMenu(plant_templates, unlocked_plants, grown_plants);\n            this.initHelpMenu();\n        });\n    }\n    setPlayButtonText(str) {\n        this.play_button.innerHTML = str;\n    }\n    addTabbableElement(element, index) {\n        element.tabIndex = index;\n        this.tabbable_elements.push(element);\n    }\n    createButton(text, class_name = null, index = null, on_click = null) {\n        const btn = this.button.cloneNode();\n        btn.classList.add(class_name);\n        btn.innerHTML = text;\n        if (index) {\n            this.addTabbableElement(btn, index);\n        }\n        btn.addEventListener('click', () => {\n            if (on_click) {\n                on_click();\n            }\n        });\n        return btn;\n    }\n    createLinkButton(text = \"\", link_to = \"\", class_name = null, index = null, on_click = null) {\n        const btn = this.createButton(text, class_name, index);\n        btn.addEventListener('click', () => {\n            src_main_events.on_request_show_menu.emit(link_to);\n            if (on_click) {\n                on_click();\n            }\n        });\n        return btn;\n    }\n    createViewButton(text = \"\", link_to, class_name = \"\", index = null, on_click = null) {\n        const btn = this.createButton(text, class_name, index);\n        btn.addEventListener('click', () => {\n            src_main_events.on_request_set_view.emit(link_to);\n            if (on_click) {\n                on_click();\n            }\n        });\n        return btn;\n    }\n    createMenu(class_name = null) {\n        const menu = this.menu.cloneNode();\n        menu.classList.add(class_name);\n        return menu;\n    }\n    showPlantMenu(plant_template, is_plant_grown) {\n        this.plant_image.src = is_plant_grown ? getPlantTemplateFullyGrownImageURL(plant_template) : plant_template.stages[0].image_url;\n        this.plant_name.innerHTML = plant_template.name;\n        this.plant_description.innerHTML = plant_template.description;\n        this.plant_stages.innerHTML = \"<b>Stages: </b>\" + plant_template.stages.length;\n        const time_to_grow_seconds = templateTimeToGrow(plant_template, src_globals.seconds_per_tick);\n        const time_to_grow_str = humanReadableTimeFromSeconds(time_to_grow_seconds);\n        this.plant_time_to_grow.innerHTML = \"<b>Time to grow at max water level: </b>\" + time_to_grow_str;\n        const water_frequency_seconds = templateWateringFrequency(plant_template, src_globals.seconds_per_tick);\n        const water_frequency_str = humanReadableTimeFromSeconds(water_frequency_seconds);\n        this.plant_water_frequency.innerHTML = \"<b>Must be watered at least every: </b>\" + water_frequency_str;\n        this.current_plant_in_menu = plant_template;\n        this.renderer.showMenu('plant');\n    }\n    displayProgressMessage(plant, plant_templates, ff = true, growth_before = null, growth_after = null, seconds_elapsed = null) {\n        let show_plant_button = false;\n        let message = \"\";\n        const time = secondsToTime(seconds_elapsed);\n        let has_time = time.m > 0;\n        if (has_time && ff) {\n            const growth_difference = growth_after - growth_before;\n            let growth_percent = growth_difference / plant.maxGrowth() * 100;\n            if (plant.isFullyGrown()) {\n                growth_percent = true;\n            }\n            message = this.progressMessageText(time, growth_percent);\n        }\n        else if (!ff) {\n            message = this.progressMessageText({ h: 0, m: 0 }, true);\n        }\n        else {\n            return;\n        }\n        const unlock = getTemplateUnlock(plant.plant_id, plant_templates);\n        if (plant.isFullyGrown() && unlock) {\n            message += '<br><b>You have unlocked a new plant - ' + unlock.name + '. Would you like to plant it?';\n            src_globals.recently_unlocked = unlock.plant_id;\n            show_plant_button = true;\n        }\n        if (show_plant_button) {\n            this.progress_message_plant.style.display = 'flex';\n        }\n        else {\n            this.progress_message_plant.style.display = 'none';\n        }\n        this.progress_message.innerHTML = message;\n        this.progress_message_container.style.display = 'flex';\n        this.progress_message_container.focus();\n    }\n    /**\n     * If you want to indicate that the plant has fully grown, pass 'true' for `growth_percentage`\n     */\n    progressMessageText(time, growth_percentage) {\n        const away_str = time.h > 0 || time.m > 0 ? 'You were away for' : '';\n        const hrs_str = time.h == 1 ? '1 hour' : time.h > 0 ? time.h + ' hours' : '';\n        const mins_str = time.m == 1 ? '1 minute' : time.m > 0 ? time.m + ' minutes' : '';\n        const and_str = time.h > 0 && time.m > 0 ? 'and' : '';\n        const growth_str = typeof growth_percentage === 'boolean' ? 'fully grown' : 'grown by ' + growth_percentage.toFixed(2) + ' %';\n        return `${away_str} ${hrs_str} ${and_str} ${mins_str} ${and_str} your plant has ${growth_str}`;\n    }\n    calculatePositions(plant) {\n        this.water_button.style.top = plant.position.y * src_const.scale + 200 + 'px';\n        this.water_button.style.left = window.innerWidth / 2 + 'px';\n    }\n    updateCollectionImage(plant_template, is_plant_unlocked, is_plant_grown) {\n        const img_element = this.collection_images[plant_template.plant_id];\n        const plant_button = img_element.closest('button');\n        if (is_plant_unlocked) {\n            let stage = 0;\n            if (is_plant_grown) {\n                stage = getTemplateMaxStageIndex(plant_template);\n            }\n            //const image = this.cache.get('image_blobs/' + plant_template.plant_id + '/' + max_stage)\n            const image_url = plant_template.stages[stage].image_url; //URL.createObjectURL(image);\n            img_element.src = image_url;\n            //Check if text has already been added to the button\n            if (!plant_button.querySelector('p')) {\n                const text = document.createElement('p');\n                text.innerHTML = plant_template.name;\n                plant_button.appendChild(text);\n                //Additionally we can add the event lisetener, because this above if statement\n                //will only be true once, when the plant isn't unlocked and there is no text\n                plant_button.addEventListener('click', () => {\n                    this.showPlantMenu(plant_template, is_plant_grown);\n                });\n            }\n        }\n        else {\n            img_element.src = 'images/question-mark.jpeg';\n        }\n    }\n    resetCollectionImages(plant_templates) {\n        for (const template_id in plant_templates) {\n            if (template_id != 'basic_plant') {\n                this.updateCollectionImage(plant_templates[template_id], false, false);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/SaveManager.ts\nvar SaveManager_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nclass SaveManager {\n    constructor(storage, cache) {\n        this.storage = storage;\n        this.cache = cache;\n    }\n    saveData(data) {\n        //If custom data object was passed, save that\n        // if(data) {\n        //     this.storage.set('data', data)\n        //     return;\n        // }\n        //Otherwise get current plants and save them\n        this.updateCachedData(data);\n        this.setData(this.data);\n    }\n    updateCachedData(data) {\n        if (data.seconds_per_tick != undefined) {\n            this.data.pace = 1 / data.seconds_per_tick;\n        }\n        if (data.plant != undefined) {\n            this.data.plant = data.plant.toJSON();\n        }\n        if (data.new_game !== undefined) {\n            this.data.new_game = data.new_game;\n        }\n        if (data.unlocked_plants !== undefined) {\n            this.data.unlocked_plants = data.unlocked_plants;\n        }\n        if (data.grown_plants !== undefined) {\n            this.data.grown_plants = data.grown_plants;\n        }\n        this.data.leave_time = new Date().getTime();\n    }\n    setCachedData(data) {\n        this.data = data;\n    }\n    getDefaultData() {\n        return SaveManager_awaiter(this, void 0, void 0, function* () {\n            const basic_plant = yield Plant.fromTemplate(0, 'basic_plant', this.cache);\n            return {\n                pace: 1,\n                max_id: 1,\n                leave_time: null,\n                unlocked_plants: [\"basic_plant\"],\n                grown_plants: [],\n                plant: basic_plant.toJSON(),\n                new_game: true,\n            };\n        });\n    }\n    setDataToDefaults() {\n        return SaveManager_awaiter(this, void 0, void 0, function* () {\n            const data = yield this.getDefaultData();\n            this.setData(data);\n            src_main_events.after_data_reset.emit();\n        });\n    }\n    setData(data) {\n        this.setCachedData(data);\n        this.storage.set('data', data);\n    }\n    resetData() {\n        return SaveManager_awaiter(this, void 0, void 0, function* () {\n            yield this.setDataToDefaults();\n        });\n    }\n    getData() {\n        if (!this.storage.has('data')) {\n            throw new Error('Could not retrieve save data: no data is set');\n        }\n        return this.storage.get('data');\n    }\n    setDataIfNull() {\n        return SaveManager_awaiter(this, void 0, void 0, function* () {\n            if (!this.storage.has('data')) {\n                yield this.setDataToDefaults();\n            }\n            else {\n                const default_data = yield this.getDefaultData();\n                this.data = Object.assign(Object.assign({}, default_data), this.getData());\n            }\n        });\n    }\n    /**\n     * Returns how long the user was away (not in-game or window not focused)\n     * @returns\n     */\n    getTimeAway() {\n        let current_time_ms = new Date().getTime();\n        let time_difference_ms = current_time_ms - this.data.leave_time;\n        return this.data.leave_time ? (time_difference_ms) / 1000 : null;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/Game.ts\nvar Game_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\nclass Game {\n    constructor() {\n        this.renderer = new Renderer('canvas', 'ui', 'menus');\n        this.cache = new MyCache();\n        this.storage = new MyStorage();\n        this.data = new SaveManager(this.storage, this.cache);\n        this.ui = new UIManager(this.renderer);\n        this.image_loader = new ImageLoader(this.cache);\n        this.first_init = false; //Whether this the game has been initialized at least once\n        this.last_frame_time = 0;\n        this.delta = 0;\n        this.delta_sum = 0;\n        this.plant_templates = {};\n        this.plants = {};\n        this.loading = true;\n        this.current_view = null;\n        src_main_events.on_request_data_reset.on(this.onRequestDataReset.bind(this));\n        src_main_events.on_request_data_save.on(this.onRequestDataSave.bind(this));\n        src_main_events.on_request_show_menu.on(this.onRequestShowMenu.bind(this));\n        src_main_events.on_request_set_view.on(this.onRequestSetView.bind(this));\n        src_main_events.on_request_fast_forward.on(this.onRequestFastForward.bind(this));\n        src_main_events.on_request_plant_new_plant.on(this.onRequestPlantNewPlant.bind(this));\n        src_main_events.on_request_water_plant.on(this.onRequestWaterPlant.bind(this));\n        src_main_events.after_data_reset.on(this.afterDataReset.bind(this));\n        window.addEventListener('focus', () => {\n            if (this.current_view == 'plant' && !this.data.data.new_game) {\n                this.fastForwardBySeconds(this.data.getTimeAway());\n            }\n        });\n        this.renderer.hideUI();\n    }\n    onRequestDataReset() {\n        return Game_awaiter(this, void 0, void 0, function* () {\n            const confirm_reset = confirm('Are you sure you want to reset all data? Plant data and collection will be lost');\n            if (!confirm_reset)\n                return;\n            yield this.data.resetData();\n            yield this.init();\n        });\n    }\n    afterDataReset() {\n        if (this.ui.play_button) {\n            this.ui.setPlayButtonText('New Game');\n        }\n    }\n    onRequestDataSave() {\n        this.data.saveData({\n            seconds_per_tick: src_globals.seconds_per_tick,\n            plant: this.plant\n        });\n    }\n    onRequestShowMenu(menu_id) {\n        this.setView(null);\n        this.renderer.showMenu(menu_id);\n    }\n    onRequestSetView(view_id) {\n        this.setView(view_id);\n    }\n    onRequestFastForward() {\n        this.fastForwardBySeconds(this.data.getTimeAway());\n    }\n    onRequestWaterPlant() {\n        this.waterCurrentPlant();\n    }\n    onRequestPlantNewPlant(template_id) {\n        this.plantNewPlant(template_id);\n    }\n    init() {\n        return Game_awaiter(this, void 0, void 0, function* () {\n            this.setLoading(true);\n            yield this.initTemplates();\n            yield this.initImages();\n            yield this.data.setDataIfNull();\n            this.initTemplateImageURLs();\n            src_globals.seconds_per_tick = 1 / this.data.data.pace;\n            window.addEventListener('resize', () => {\n                this.calculatePositions();\n            });\n            console.log(this.data.data);\n            if (!this.first_init) {\n                yield this.ui.initUi(this.plant_templates, this.data.data.unlocked_plants, this.data.data.grown_plants, this.data.data.new_game);\n                this.first_init = true;\n            }\n            yield this.initPlants();\n            this.calculatePositions();\n            this.setLoading(false);\n            this.renderer.showMenu('main');\n        });\n    }\n    initImages() {\n        return Game_awaiter(this, void 0, void 0, function* () {\n            for (const template_id in this.plant_templates) {\n                const template = this.plant_templates[template_id];\n                for (let i = 0; i < template.stages.length; i++) {\n                    yield this.image_loader.loadTemplateImageIfNull(template.plant_id, i);\n                }\n            }\n        });\n    }\n    initPlants() {\n        return Game_awaiter(this, void 0, void 0, function* () {\n            const plant = yield Plant.fromJSON(this.data.data.plant, this.cache);\n            this.setPlant(plant);\n        });\n    }\n    initTemplates() {\n        return Game_awaiter(this, void 0, void 0, function* () {\n            for (const template_id of src_const.plant_template_ids) {\n                const res = yield fetch('plant_templates/' + template_id + '.json');\n                const json = yield res.json();\n                this.plant_templates[template_id] = json;\n            }\n        });\n    }\n    initTemplateImageURLs() {\n        for (const template_id in this.plant_templates) {\n            const template = this.plant_templates[template_id];\n            for (const i in template.stages) {\n                const image = this.cache.get('image_blobs/' + template.plant_id + '/' + i);\n                template.stages[i].image_url = URL.createObjectURL(image);\n            }\n        }\n    }\n    onPlantFullyGrown(plant) {\n        this.ui.displayProgressMessage(this.plant, this.plant_templates, false);\n        this.data.saveData({\n            plant: this.plant,\n            unlocked_plants: [...this.data.data.unlocked_plants, plant.unlocks],\n            grown_plants: [...this.data.data.grown_plants, plant.plant_id]\n        });\n        if (plant.unlocks) {\n            const unlocked_template = this.plant_templates[plant.unlocks];\n            this.ui.updateCollectionImage(unlocked_template, true, false);\n        }\n        this.ui.updateCollectionImage(this.plant_templates[plant.plant_id], true, true);\n    }\n    fastForwardBySeconds(seconds) {\n        if (this.data.data.new_game) {\n            return;\n        }\n        if (!seconds) {\n            return;\n        }\n        const growth_before = this.plant.growth;\n        const ticks = this.getTicksBySeconds(seconds);\n        this.plant.fastForward(ticks);\n        const growth_after = this.plant.growth;\n        this.ui.displayProgressMessage(this.plant, this.plant_templates, true, growth_before, growth_after, seconds);\n    }\n    getTicksBySeconds(seconds) {\n        return seconds / src_globals.seconds_per_tick;\n    }\n    setView(view_name) {\n        this.current_view = view_name;\n        if (view_name) {\n            this.renderer.hideMenu();\n        }\n        if (view_name == 'plant') {\n            if (this.data.data.new_game == true) {\n                this.data.saveData({\n                    new_game: false\n                });\n                this.ui.setPlayButtonText('My Plant');\n            }\n        }\n    }\n    calculatePositions() {\n        this.plant.setPosition(getViewportCenter());\n        this.ui.calculatePositions(this.plant);\n    }\n    setLoading(loading) {\n        this.loading = loading;\n        if (this.loading) {\n            this.renderer.ui.style.display = 'none';\n            if (this.renderer.menu) {\n                this.renderer.currentMenu().style.display = 'none';\n            }\n            document.getElementById('loading').style.display = 'flex';\n        }\n        else {\n            if (this.renderer.menu) {\n                this.renderer.currentMenu().style.display = 'block';\n            }\n            else {\n                this.renderer.ui.style.display = 'block';\n            }\n            document.getElementById('loading').style.display = 'none';\n        }\n    }\n    start() {\n        window.requestAnimationFrame(this.gameLoop.bind(this));\n    }\n    tick() {\n        this.data.saveData({\n            plant: this.plant\n        });\n        this.plant.tick();\n    }\n    draw() {\n        this.renderer.clear();\n        if (!this.loading && !this.renderer.menu && this.current_view == 'plant') {\n            this.renderer.drawPlant(this.plant);\n        }\n    }\n    waterCurrentPlant() {\n        this.plant.water_level.top();\n        this.plant.updateWaterLevelBar();\n    }\n    gameLoop() {\n        this.calculateDeltaSum();\n        if (this.delta_sum > src_globals.seconds_per_tick && !this.loading && this.current_view == 'plant') {\n            this.tick();\n            this.delta_sum = 0;\n        }\n        this.draw();\n        window.requestAnimationFrame(this.gameLoop.bind(this));\n    }\n    calculateDeltaSum() {\n        const current_time = new Date().getTime();\n        this.delta = (current_time - this.last_frame_time) / 1000;\n        this.last_frame_time = new Date().getTime();\n        this.delta_sum += this.delta;\n    }\n    // createPlant(plant: Plant) {\n    //     this.plants[plant.id] = plant;\n    // }\n    plantNewPlant(template_id) {\n        return Game_awaiter(this, void 0, void 0, function* () {\n            const plant = yield Plant.fromTemplate('my_plant', template_id, this.cache);\n            this.setPlant(plant);\n            this.setView('plant');\n        });\n    }\n    setPlant(plant) {\n        this.plant = plant;\n        this.plant.onFullyGrown(this.onPlantFullyGrown.bind(this));\n    }\n    unlockAll() {\n        this.data.saveData({\n            unlocked_plants: [...src_const.plant_template_ids]\n        });\n        alert('All plants have been unlocked, please refresh the page');\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\nconst game = new Game();\ngame.init().then(() => {\n    game.start();\n});\nwindow.game = game;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///680\n")}},__webpack_require__={r:g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__[680](0,__webpack_exports__,__webpack_require__);var __webpack_export_target__=this;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();